@startuml

skinparam classAttributeIconSize 0

    interface IPhysicalUnit {
        {abstract} + abbrev()
        {abstract} + canTransformTo(u: IPhysicalUnit)
        {abstract} + getMetricSystem()
        {abstract} + getQuantity()
        {abstract} + transformTo(d: double, u: IPhysicalUnit)
    }

    abstract class Length {
        + getQuantity()
    }

    abstract class PhysicalUnit {
        - abbr : String
        - cFactor : double
        + PhysicalUnit()
        + abbrev()
        + canTransformTo(u: IPhysicalUnit)
        + transformTo(d: double, u: IPhysicalUnit)
    }

    enum Quantity {
      L
      t
    }

    abstract class Time {
        + getQuantity()
    }

  

  Length -up-|> PhysicalUnit
  PhysicalUnit .up.|> IPhysicalUnit
  Time -up-|> PhysicalUnit
  

      interface IMetricSystem {
          {abstract} + addConverter(c: IMetricSystemConverter)
          {abstract} + base()
          {abstract} + getConverter(to: IMetricSystem)
          {abstract} + units()
      }

      interface IMetricSystemConverter {
          {abstract} + reverse()
          {abstract} + sourceSystem()
          {abstract} + targetSystem()
          {abstract} + transformTo(from: IMagnitude, to: IPhysicalUnit)
      }

      abstract class MetricSystem {
          + addConverter(c: IMetricSystemConverter)
          + base()
          + getConverter(to: IMetricSystem)
          + units()
      }

      class MetricSystemConverter {
          - factor : double
          + reverse()
          + sourceSystem()
          + targetSystem()
          + transformTo(from: IMagnitude, to: IPhysicalUnit)
      }

 MetricSystem  "0..1" o-up- "*" IMetricSystemConverter: converters
    MetricSystem "*" o-left- "*" IPhysicalUnit: units
    MetricSystem .right.|> IMetricSystem
    MetricSystem "*" o-left- "1" IPhysicalUnit : base
    MetricSystemConverter .left.|> IMetricSystemConverter
    MetricSystemConverter "*" o-down- "1" IMetricSystem : source
    MetricSystemConverter "*" o-down- "1" IMetricSystem : target

          class SiTimeMetricSystem {
              {static} + HOUR : IPhysicalUnit
              {static} + MILISECOND : IPhysicalUnit
              {static} + SECOND : IPhysicalUnit
              {static} + SYSTEM : IMetricSystem
              {static} + registerConverter()
          }

    SiTimeMetricSystem -up-|> MetricSystem

      class SiLengthMetricSystem {
          {static} + KILOMETER : IPhysicalUnit
          {static} + METER : IPhysicalUnit
          {static} + MILIMETER : IPhysicalUnit
          {static} + SYSTEM : IMetricSystem
          {static} + registerConverter()
      }


SiLengthMetricSystem -up-|> MetricSystem

      class ImperialLengthMetricSystem {
          {static} + FOOT : IPhysicalUnit
          {static} + INCH : IPhysicalUnit
          {static} + MILE : IPhysicalUnit
          {static} + SYSTEM : IMetricSystem
          {static} + registerConverter()
      }
ImperialLengthMetricSystem -up-|> MetricSystem

    interface IMagnitude {
        {abstract} + add(m: IMagnitude)
        {abstract} + getUnit()
        {abstract} + getValue()
        {abstract} + subs(m: IMagnitude)
        {abstract} + transformTo(c: IPhysicalUnit)
    }

    class Magnitude {
        - value : double
        + add(m: IMagnitude)
        + getUnit()
        + getValue()
        + subs(m: IMagnitude)
        + transformTo(c: IPhysicalUnit)
    }

  Magnitude .up.|> IMagnitude
  Magnitude "*" o-right- "1" IPhysicalUnit : unit

        class  QuantityException {
        }

        class  UnknownUnitException {
            ~ a1 : String
            ~ a2 : String
        }

     QuantityException "*" o-- "1" Quantity : q1
     QuantityException "*" o-- "1" Quantity : q2
     UnknownUnitException -up-|>  QuantityException

     class SiTime {
        +getMetricSystem()
     }

     class SiLength {
         +getMetricSystem()
    }

      class ImperialLength {
        +getMetricSystem()
       }

SiTime -up-|> Time
SiLength -up-|> Length
ImperialLength -up-|> Length

note "Las unidades y sistemas m√©tricos contenidos en \nSiTimeMetricSystem, SiLengthMetricSystem y \nImperialLengthMetricSystem, a pesar de ser \nestrictamente asociaciones, se han colocado \ndentro de las clases para facilitar la lectura del \ndiagrama." as N1
@enduml
